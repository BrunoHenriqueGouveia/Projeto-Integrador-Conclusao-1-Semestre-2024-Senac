/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2024-06-03 23:53:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public final class salvarEvento_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(5);
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>Salvar Evento</title>\n");
      out.write("    </head>\n");
      out.write("    <body>\n");
      out.write("        ");


            String u = request.getParameter("email");
            String emailIndex = "index.jsp?email=" + u;
            String nomeDoevento, local, endereco, cep, descricao, dataInicio, dataFim, horaInicio, horaFim, categoria,imagem;
           
            nomeDoevento = request.getParameter("nomeDoevento");
            local = request.getParameter("local");
            endereco = request.getParameter("endereco");
            cep = request.getParameter("cep");
            descricao = request.getParameter("descricao");
            dataInicio = request.getParameter("dataInicio");
            dataFim = request.getParameter("dataFim");
            horaInicio = request.getParameter("horaInicio");
            horaFim = request.getParameter("horaFim");
            categoria = request.getParameter("categoria");
            imagem = request.getParameter("fileNameInput");

            String[] vetorInicio = dataInicio.split("-");
            String[] vetorFim = dataFim.split("-");
            dataInicio = vetorInicio[2] + "/" + vetorInicio[1] + "/" + vetorInicio[0];
            dataFim = vetorFim[2] + "/" + vetorFim[1] + "/" + vetorFim[0];
            
            //ingresso
            int qtdingressoMeia, qtdingressoVip, qtdingressoInteira;
            double precoMeia, precoVip, precoInteiro;

            qtdingressoMeia = Integer.parseInt(request.getParameter("qtdingressoMeia"));
            qtdingressoVip = Integer.parseInt(request.getParameter("qtdingressoVip"));
            qtdingressoInteira = Integer.parseInt(request.getParameter("qtdingressoInteira"));

            precoMeia = Double.parseDouble(request.getParameter("precoMeia"));
            precoVip = Double.parseDouble(request.getParameter("precoVip"));
            precoInteiro = Double.parseDouble(request.getParameter("precoInteiro"));

            try {//conecta com banco de dados
                Class.forName("com.mysql.cj.jdbc.Driver");
                Connection conectado = DriverManager.getConnection("jdbc:mysql://localhost:3306/diver", "root", "p@$$w0rd");
               
                // condição que o usuario so pode criar evento se estiver logado
                if (u != null) {                
                    PreparedStatement st = conectado.prepareStatement("INSERT INTO evento (nomeDoevento,local,endereco,cep,descricao, data_inicio,data_fim,hora_inicio,hora_fim,categoria_evento,qtd_ingresso_vip,preco_vip,qtd_ingresso_meia,preco_meia,qtd_ingresso_inteira,preco_inteiro,email,imagem) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                    st.setString(1, nomeDoevento);
                    st.setString(2, local);
                    st.setString(3, endereco);
                    st.setString(4, cep);
                    st.setString(5, descricao);
                    st.setString(6, dataInicio);
                    st.setString(7, dataFim);
                    st.setString(8, horaInicio);
                    st.setString(9, horaFim);
                    st.setString(10, categoria);
                    st.setInt(11, qtdingressoVip);
                    st.setDouble(12, precoVip);
                    st.setInt(13, qtdingressoMeia);
                    st.setDouble(14, precoMeia);
                    st.setInt(15, qtdingressoInteira);
                    st.setDouble(16, precoInteiro);
                    st.setString(17, u);
                    st.setString(18, imagem);
                    st.executeUpdate();//salvar no banco de dados

        
      out.write("\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("\n");
      out.write("            alert(\"Evento Cadastrado\");\n");
      out.write("            window.location.href = \"");
      out.print( emailIndex);
      out.write("\";\n");
      out.write("\n");
      out.write("        </script>\n");
      out.write("\n");
      out.write("        ");
    } else {// se não apareçera uma msg´para ele logar

        
      out.write("\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("\n");
      out.write("            alert(\"Voçe precisa esta Logado na sua conta para criar Evento\");\n");
      out.write("            window.location.href = \"");
      out.print( emailIndex);
      out.write("\";\n");
      out.write("\n");
      out.write("        </script>\n");
      out.write("\n");
      out.write("        ");
            }

        } catch (ClassNotFoundException ex) {

        
      out.write("\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("            alert(\"Erro ao tentar localizar Driver JDBC\");\n");
      out.write("            window.location.href = \"");
      out.print(emailIndex);
      out.write("\";\n");
      out.write("        </script>\n");
      out.write("\n");
      out.write("        ");

        } catch (SQLException ex) {
            
            // se o evento ja existe aparecera uma msg evento ja cadastrado
            if (ex.getMessage().contains("Duplicate entry")) {
        
      out.write("\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("            alert(\"Evento ja cadastrado\");\n");
      out.write("            window.location.href = \"");
      out.print(emailIndex);
      out.write("\";\n");
      out.write("        </script>\n");
      out.write("\n");
      out.write("        ");

        } else {
        
      out.write("\n");
      out.write("\n");
      out.write("        <script>\n");
      out.write("            alert(\"Erro na conexão com o banco de dados\" + ex.getMessage());\n");
      out.write("            window.location.href = \"");
      out.print(emailIndex);
      out.write("\";\n");
      out.write("        </script>\n");
      out.write("\n");
      out.write("        ");

                }
            }
        
      out.write("\n");
      out.write("\n");
      out.write("    </body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
